-----------vpl_evaluate.sh and vpl_run.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution




-------------execute.py

import os, subprocess, time, re
from subprocess import PIPE, Popen


num_testcases = 15

grade = 0
msg = '+-----------------------------------+\n'

po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
        commentfile.write('Compilation Error\n')
        commentfile.write(po)
        commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    exit(0)
    
else:
    for i in range(num_testcases):
        ps = Popen('./a.out', stdin=PIPE, stdout=PIPE)
        (out,err) = ps.communicate(str(i)+'\n')
        msg = msg + str(out)
        matches = re.findall('Score :=>> (.+)',out)
        if len(matches)==0:
            msg += "Some error occured, possibly a segmentation fault\nScore :=>> 0.0\n"
        msg = msg + '+-----------------------------------+\n'
        grade += float(matches[-1]) if len(matches)>0 else 0.0

grade = round(min(grade,10),2)
msg = msg + "Final Score ==> "+str(grade)+"\n\n"

with open('comments','w') as commentfile:
    commentfile.write(msg)

print("Grade :=>> "+str(grade))




----------compile.sh

#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile "$@"





------------instructormain.cpp

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

extern string find_element(vector<string> & V);

bool checker(string & studentAns, string & correctAns){
  
 return (studentAns.compare(correctAns)==0)?true:false;
  
  
}

int main(){
    
    int total_testcases = 15;
    srand(1);

    int test_case_num;
    cin >> test_case_num;
    
    cout<<"Running on testcase "<<test_case_num+1<<endl;
   
    
    int length = rand()%100 + 3;
    vector<string> input;
    for(int i=0;i<length;i++){
        string ss="";
        int len = rand()%10 + 1;
         static const char alphanum[] =
        "0123456789"
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz";
        for (int i = 0; i < len; ++i)
            ss+= alphanum[rand() % (sizeof(alphanum) - 1)];
        input.push_back(ss);
    }
   
    vector<string> vect2; 
    
    for (int i=0; i<input.size(); i++) 
        vect2.push_back(input[i]); 
        
    sort(vect2.begin(),vect2.end());
   
    streambuf *old = cout.rdbuf();
    cout.rdbuf(0);
   
    string studentAns = find_element(input);
    
    cout.rdbuf(old);
    
    bool isCorrect = checker(studentAns, vect2[vect2.size()-3]);
    cout<<"Testcase "<<test_case_num+1<<(isCorrect ? " passed" : " failed")<<endl;
    cout<<"Score :=>> "<<(isCorrect ? 20.0*(test_case_num+1)/(total_testcases*(total_testcases+1)) : 0.0 )<<endl;
    return 0;
    
}
