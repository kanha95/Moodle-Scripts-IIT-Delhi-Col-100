---------vpl_run.sh and vpl_evaluate.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python3 execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution




----------execute.py


import os, subprocess, time, re
from subprocess import PIPE, Popen
import zipfile

num_testcases = 40
total_execution_time = 4.5

grade = 0
msg = '+-----------------------------------+\n'

po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
        commentfile.write('Compilation Error\n')
        # commentfile.write(po)
        commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    exit(0)
    
else:
    for i in range(num_testcases):
        ps = Popen('./a.out', stdin=PIPE,stdout=PIPE)
        try:
            msg += 'Running on testcase '+str(i+1)+'\n'
            infile = 'test' + str(i+1)+'.txt'
            (out,err) = ps.communicate(bytes(infile,'utf-8'),
                timeout=2.0*total_execution_time*(i+1)/(num_testcases*(num_testcases+1)))
    
            msg = msg + str(out.decode("utf-8"))
            matches = re.findall('Score :=>> (.+)',str(out.decode("utf-8")))
            if len(matches)==0:
                msg += "Some error occured, possibly a segmentation fault\n"
            grade += float(matches[-1]) if len(matches)>0 else 0.0
            
        except subprocess.TimeoutExpired:
            ps.kill()
            msg += "Timeout occured\nScore :=>> 0.0\n"
        msg = msg + '+-----------------------------------+\n'

grade = round(20.0*(grade/num_testcases),2)
msg = msg + "Final Score ==> "+str(grade)+"\n"

with open('comments','w') as commentfile:
    commentfile.write(msg)

print("Grade :=>> "+str(grade))


--------------------------compile.sh





#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile "$@"






----------instructormain.cpp



#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

extern bool plagiarism_checker(string s1, string s2, int X, int Y);

int main(){
   
    string infile;
    cin>>infile;
    string s1, s2;
    int X, Y;
    
    
    ifstream file;
    file.open(infile);
    
    string line;
    getline(file, line);
    X = stoi(line);
    getline(file, line);
    Y = stoi(line);
    getline(file, s1);
    getline(file, s2);
    getline(file, line);
    bool correct_ans = stoi(line);
    
     if(X==29 || X==2 || X==8 || X==65 || X==18){
         cout<<"X => "<<X<<endl;
          cout<<"Y => "<<Y<<endl;
        cout<<"s1 => "<<s1<<endl;
        cout<<"s2 => "<<s2<<endl;
      
        
    }
    
    streambuf *old = cout.rdbuf();
    cout.rdbuf(0);
    
    string t="true", f="false";
    
    bool student_ans = plagiarism_checker(s1, s2, X, Y);
    
     
    cout.rdbuf(old);
      if(X==29 || X==2 || X==8 || X==65 || X==18){
      
        cout<<"studentAns => "<< ((student_ans==1)?t:f) <<endl;
        cout<<"correctAns => "<< ((correct_ans==1)?t:f) <<endl;
        
    }
    
    //cout<<"Res :=>> " << student_ans << " " << correct_ans <<endl;
    cout<<"Score :=>> " <<( (student_ans==correct_ans)? 1.0 : 0.0)<<endl;
    
    return 0;
    
}
