----------vpl_evaluate.sh and vpl_run.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python3 execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution




--------execute.py

import os, subprocess, time, re
from subprocess import PIPE, Popen
import zipfile

num_testcases = 20
total_execution_time = 3.0

grade = 0
msg = '+-----------------------------------+\n'

po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
        commentfile.write('Compilation Error\n')
        # commentfile.write(po)
        commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    exit(0)
    
else:
    for i in range(num_testcases):
        ps = Popen('./a.out', stdin=PIPE,stdout=PIPE)
        try:
            msg += 'Running on testcase '+str(i+1)+'\n'
            infile = str(i+1)+'.txt'
            outfile = str(i+1)+'.out.txt'
            (out,err) = ps.communicate(bytes(infile+' stud_'+outfile+'\n','utf-8'),
                timeout=2.0*total_execution_time*(i+1)/(num_testcases*(num_testcases+1)))
    
            matches = re.findall('Ran successfully',str(out.decode("utf-8")))
            score_this_testcase = 0.0
            
            if len(matches)==0:
                msg += "Some error occured, possibly a segmentation fault\n"
            else:
                try:
                    with open('stud_'+outfile, 'r') as student_ans_file:
                        try:
                            student_ans = student_ans_file.read().strip()
                            correct_ans = open('true_'+outfile, 'r').read().strip()
                            if(i<1):
                                msg += "Student_ans ==>\n"+student_ans +"\nCorrect_ans ==>\n" + correct_ans +"\n"
                            if(student_ans == correct_ans):
                                score_this_testcase = 20.0*(i+1)/(num_testcases*(num_testcases+1))
                        except:
                            msg += 'Your output file contains invalid characters\n'
                except EnvironmentError:
                    msg += 'Requested output file not found\n\n'
                    score_this_testcase = 0.0
                grade += score_this_testcase
                msg += 'Score :=>> '+str(score_this_testcase)+'\n'
        except subprocess.TimeoutExpired:
            ps.kill()
            msg += "Timeout occured\nScore :=>> 0.0\n"
        msg = msg + '+-----------------------------------+\n'

grade = round(min(grade,10),2)
msg = msg + "Final Score ==> "+str(grade)+"\n"

with open('comments','w') as commentfile:
    commentfile.write(msg)

print("Grade :=>> "+str(grade))





-----------compile.sh


#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile "$@"








------------instructormain.cpp


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

extern void prettyPrint(string infilename, string outfilename);

int main(){
   
    string infile,outfile;
    cin>>infile>>outfile;
    
    streambuf *old = cout.rdbuf();
    cout.rdbuf(0);
    prettyPrint(infile,outfile);
    cout.rdbuf(old);
    
    cout<<"Ran successfully"<<endl;
    
    return 0;
    
}



