--------vpl_evaluate.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution

------------execute.py

import os, subprocess, time
from subprocess import PIPE, Popen

output_values = [3.14]
reduction = [100]
num_of_test_cases = 1

total_reduction = 0
correct_count = 0
msg = ''
grade =  10
po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
(out,err) = po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
            commentfile.write('Compilation Error\n')
            commentfile.write(out)
            commentfile.close()
            print('Grade :=>> 0')
    print('Compilation Error! Grade :=>> 0')
    grade = 0
    exit(0)

print("Running test case...")
for i in range(num_of_test_cases):
    ps = Popen('./a.out', stdin=PIPE, stdout=PIPE)
    (out,err) = ps.communicate(b'\n')
    isInt = True
    try:
        user_out = float(out)
    except ValueError:
        isInt = False
    if isInt and user_out == output_values[i]:
        print("+1")
        correct_count = correct_count + 1
    else:
        print("-1")
        total_reduction = total_reduction + reduction[i]
        msg = msg + 'Failed case: \n your output: ' + out + '\n correct output: ' + str(output_values[i]) + '\n\n'

grade = grade - (total_reduction/10)

display = '+-----------------------------------+\n'
display = display + '           ' + str(correct_count) + ' / ' + str(num_of_test_cases) + ' cases passed\n\n'
display = display + '+-----------------------------------+\n\n'
display = display + msg

with open('comments','w') as commentfile:
        commentfile.write(display)

print('Grade :=>> ' + str(grade))





--------compile.sh

#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
elif [ $# -gt 1 ];
then
        echo "More than one file as input! This may not work correctly!"
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile $1
