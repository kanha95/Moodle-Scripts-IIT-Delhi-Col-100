-----vpl_run.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution

---------vpl_evaluate.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution



------execute.py

import os, subprocess, time
from subprocess import PIPE, Popen

input_values = ['35\n10\n', '20\n10\n', '596\n27\n', '88\n74\n', '13\n3\n']
output_values = [5, 70, 10, 20, 1, 16092, 2, 3256, 1, 39]
reduction = [10, 20, 30, 10, 30]
num_of_test_cases = 5

total_reduction = 0
correct_count = 0
msg = ''
grade =  10
j = -1
po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
out1, err1 = po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
            commentfile.write('Compilation Error\n')
            commentfile.write(out1)
            commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    grade = 0
    exit(0)

print("Running test case...")
for i in range(num_of_test_cases):
    ps = Popen('./a.out', stdin=PIPE, stdout=PIPE)
    (out,err) = ps.communicate(input_values[i])
    j = j + 1
    #"""
    isInt = True

    try:
        user_out1 = int(out.splitlines()[0])
        user_out2 = int(out.splitlines()[1])
    except Exception as e:
        isInt = False
        
    if isInt and user_out1 == output_values[i+j] and user_out2 == output_values[i+j+1]:
    #"""
    #if out.strip() == '{}\n{}'.format(output_values[i+j], output_values[i+j+1]):
        #print("+1")
        correct_count = correct_count + 1
    else:
        #print("-1")
        total_reduction = total_reduction + reduction[i]
        msg = msg + 'Failed case: \n input: ' + str(input_values[i]) + ' \n your output: ' + out + '\n correct output: ' + str(output_values[i+j]) + '\n' + str(output_values[i+j+1]) + '\n\n'
    
grade = grade - (total_reduction/10)

display = '+-----------------------------------+\n'
display = display + '           ' + str(correct_count) + ' / ' + str(num_of_test_cases) + ' cases passed\n\n'
display = display + '+-----------------------------------+\n\n'
display = display + msg

with open('comments','w') as commentfile:
        commentfile.write(display)

print('Grade :=>> ' + str(grade))




--------compile.sh

#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
elif [ $# -gt 1 ];
then
        echo "More than one file as input! This may not work correctly!"
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile $1
