------vpl_evaluate.sh-------vpl_run.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python3 execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution




---------execute.py

import os, subprocess, time, re
from subprocess import PIPE, Popen

num_testcases = 25
total_execution_time = 6.0

grade = 0
msg = '+-----------------------------------+\n'

po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
        commentfile.write('Compilation Error\n')
        # commentfile.write(po)
        commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    exit(0)
    
else:
    for i in range(num_testcases):
        ps = Popen('./a.out', stdin=PIPE, stdout=PIPE)
        try:
            (out,err) = ps.communicate(bytes(str(i)+'\n','utf-8'),timeout=2.0*total_execution_time*(i+1)/(num_testcases*(num_testcases+1)))
            out = str(out.decode("utf-8"))
            msg = msg + str(out)
            matches = re.findall('Score :=>> (.+)',out)
            if len(matches)==0:
                msg += "Some error occured, possibly a segmentation fault\nScore :=>> 0.0\n"
            grade += float(matches[-1]) if len(matches)>0 else 0.0
        except subprocess.TimeoutExpired:
            ps.kill()
            msg += "Running on testcase "+str(i+1)+"\nTimout occured\nScore :=>> 0.0\n"
        msg = msg + '+-----------------------------------+\n'
        

grade = round(min(grade,10),2)
msg = msg + "Final Score ==> "+str(grade)+"\n"

with open('comments','w') as commentfile:
    commentfile.write(msg)

print("Grade :=>> "+str(grade))






-------compile.sh


#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile "$@"





----------instructormain.cpp


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

extern void arrangeVector(vector<int> & V);

bool checker(vector<int>& studans, vector<int> & origarr ){
    if(studans.size() != origarr.size())
        return false;
    
    bool gotPositive = false;

    for(int i=0;i<studans.size();i++){
        if(studans[i]<0 && !gotPositive)
            continue;
        else if(studans[i]<0 && gotPositive)
            return false;
        else if(studans[i]>=0 && !gotPositive)
            gotPositive=true;
        else
            continue;
    }
    
    sort(origarr.begin(),origarr.end());
    sort(studans.begin(),studans.end());
    
    for(int i=0;i<studans.size();i++){
        if(studans[i]!=origarr[i])
            return false;
    }
    
    return true;
    
}

int main(){
   
    int total_testcases = 25;
    int max_length = 1000;
    int max_val = 1000;
    
    srand(1);
    
    int test_case_num;
    cin >> test_case_num;
    
    vector<int> edge_cases[] = {{1,1,1,1,1,1,1,1,1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1}, {0,0,0,0,0,0,0,0,0}};
    
    vector<int> input;
    
    if(test_case_num<=2){
        input = edge_cases[test_case_num];
    }
    else{
        int length_arr = (max_length/total_testcases) * (test_case_num+1);
        for(int i=0;i<length_arr-1;i++){
            int num = (rand()%(2*max_val) - max_val);
            input.push_back(num);
        }
        input.push_back(0);
    }
    vector<int> origInput = input;
    
    cout<<"Running on testcase "<<test_case_num+1<<endl;
    
    streambuf *old = cout.rdbuf();
    cout.rdbuf(0);
    arrangeVector(input);
    cout.rdbuf(old);
    
    bool isCorrect = checker(input,origInput);
    cout<<"Testcase "<<test_case_num+1<<(isCorrect ? " passed" : " failed")<<endl;
    cout<<"Score :=>> "<<(isCorrect ? 20.0*(test_case_num+1)/(total_testcases*(total_testcases+1)) : 0.0 )<<endl;
    return 0;
    
}
