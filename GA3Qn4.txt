-------------vpl_execute.sh and vpl_run.sh

#!/bin/bash

echo "" > vpl_execution
grade=`python execute.py`

while read line
do
    echo "echo \"Comment :=>> $line\"" >> vpl_execution
done < comments
echo "echo \"$grade\"" >> vpl_execution

chmod +x vpl_execution




------------execute.py

import os, subprocess, time, re
from subprocess import PIPE, Popen


num_testcases = 17

grade = 0
msg = '+-----------------------------------+\n'

po = subprocess.Popen('./compile.sh *.cpp', stdout=PIPE, shell=True)
po.communicate()
if po.returncode > 0:
    with open('comments','w') as commentfile:
        commentfile.write('Compilation Error\n')
        commentfile.write(po)
        commentfile.close()
    print('Compilation Error! Grade :=>> 0')
    exit(0)
    
else:
    for i in range(num_testcases):
        ps = Popen('./a.out', stdin=PIPE, stdout=PIPE)
        (out,err) = ps.communicate(str(i)+'\n')
        msg = msg + str(out)
        matches = re.findall('Score :=>> (.+)',out)
        if len(matches)==0:
            msg += "Some error occured, possibly a segmentation fault\nScore :=>> 0.0\n"
        msg = msg + '+-----------------------------------+\n'
        grade += float(matches[-1]) if len(matches)>0 else 0.0

grade = round(min(grade,10),2)
msg = msg + "Final Score ==> "+str(grade)+"\n"

with open('comments','w') as commentfile:
    commentfile.write(msg)

print("Grade :=>> "+str(grade))





------------compile.sh

#!/bin/bash

function compile() {
    g++ -std=c++11 -I /stanford/ -I /stanford/collections -I /stanford/graphics -I /stanford/io  -I /stanford/private -I /stanford/system -I /stanford/util -L /stanford "$@" -lstanford -ldl -lpthread
}

if [ $# -lt 1 ];
then
        echo "Argument expected!"
        exit 1
fi

if [ ! -f $1 ];
then
        echo "$1 does not exist or I don't have permission for reading it"
        exit 2
fi

cp /stanford/spl.jar ~
compile "$@"






----------instructormain.cpp

#include <iostream>
#include <vector>

using namespace std;

extern vector<long long int> nthRowPascal(int n);

bool checker(vector<long long int>& studans, int n){
    n--;
    std::vector<long long int> row(n+1);
    row[0] = 1;
    for(int i=1; i<n/2+1; i++)
        row[i] = row[i-1] * (n-i+1)/i;
    for(int i=n/2+1; i<=n; i++)
        row[i] = row[n-i];
    
    // Checker code
    if(row.size() != studans.size())
        return false;
    
    for(int i=0;i<row.size();i++){
        if(row[i]!=studans[i])
            return false;
    }
    return true;
}

int main(){
    vector<int> inputs;
    for(int i=1;i<=50;i+=3){
        inputs.push_back(i);
    }

    int test_case_num;
    cin >> test_case_num;
    
    int n;
    if(test_case_num < inputs.size() && test_case_num >= 0)
        n = inputs[test_case_num];
    else
        n = inputs[inputs.size()-1];
        
    cout<<"Running on testcase "<<test_case_num+1<<endl;
    
    streambuf *old = cout.rdbuf();
    cout.rdbuf(0);
    vector<long long int> studAns = nthRowPascal(n);
    cout.rdbuf(old);
    
    bool isCorrect = checker(studAns,n);
    cout<<"Testcase "<<test_case_num+1<<(isCorrect ? " passed" : " failed")<<endl;
    cout<<"Score :=>> "<<(isCorrect ? 20.0*(test_case_num+1)/(inputs.size()*(inputs.size()+1)) : 0.0 )<<endl;
    return 0;
    
}
